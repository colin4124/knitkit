* DONE Data Type [100%]
CLOSED: [2021-09-15 三 00:51]
| Name          | Usage     | Description                                   |
|---------------+-----------+-----------------------------------------------|
| UInt          | UInt(5.W) | Unsigned Integer with 5-bit width             |
| SInt          | SInt(3.W) | Signed Integer with 3-bit width               |
| Bool          | Bool()    | 1-bit unsigned integer, the same as UInt(1.W) |
| Analog        |           |                                               |
| Clock         |           |                                               |
| Reset         |           |                                               |
| AsyncPosReset |           |                                               |
| AsyncNegReset |           |                                               |

** DONE Literal
*** Inferred Width  
根据左边的值自动推导宽度
#+begin_src scala
  val out1 = IO(Output(UInt(5.W)))
  out1 := 1.U
  // 无符号 3位整型
  val out2 = IO(Output(UInt(3.W)))
  out2 := 5.U
  // 有符号 4位整型
  val out3 = IO(Output(SInt(4.W)))
  out3 := 5.S 
  // ４位十进制负数
  val out4 = IO(Output(SInt(4.W)))
  out4 := -8.S
#+end_src

#+begin_src verilog
  output [4:0] out1,
  assign out1 = 5'h1;
  
  output [2:0] out2,
  assign out2 = 3'h5;
  
  output [3:0] out3,
  assign out3 = 4'sh5;

  output [3:0] out4
  assign out4 = -4'sh8;
#+end_src
*** Specified Width
也可以指定宽度
#+begin_src scala
  out1 := 8.U(4.W)
  out2 := -152.S(32.W) // 32位有符号十进制数
  out3 := 5.asSInt(7.W) // signed decimal 7-bit lit of type SInt
  out4 := 5.asUInt(8.W) // unsigned decimal 8-bit lit of type UInt
#+end_src

#+begin_src verilog
  assign out1 = 4'h8;
  assign out2 = -32'sh98;
  assign out3 = 7'sh5;
  assign out4 = 8'h5;
#+end_src
*** String Literals
字符串常量
#+begin_src scala
  // ４位16进制
  val out1 = IO(Output(UInt(4.W)))
  out1 := "ha".U
  // 4位八进制
  val out2 = IO(Output(UInt(4.W)))
  out2 := "o12".U 
  // 4位二进制
  val out3 = IO(Output(UInt(4.W)))
  out3 := "b1010".U
  // 32-bit lit of type UInt
  val out4 = IO(Output(UInt(32.W)))
  out4 := "h_dead_beef".U
  // hexadecimal 8-bit lit of type UInt
  val out5 = IO(Output(UInt(8.W)))
  out5 := "ha".asUInt(8.W)
  // octal 6-bit lit of type UInt
  val out6 = IO(Output(UInt(6.W)))
  out6 := "o12".asUInt(6.W)
  // binary 12-bit lit of type UInt
  val out7 = IO(Output(UInt(12.W)))
  out7 := "b1010".asUInt(12.W)
#+end_src

#+begin_src verilog
  output [3:0]  out1,
  assign out1 = 4'ha;
  
  output [3:0]  out2,
  assign out2 = 4'ha;
  
  output [3:0]  out3,
  assign out3 = 4'ha;
  
  output [31:0] out4,
  assign out4 = 32'hdeadbeef;
  
  output [7:0]  out5,
  assign out5 = 8'ha;
  
  output [5:0]  out6,
  assign out6 = 6'ha;

  output [11:0] out7
  assign out7 = 12'ha;
#+end_src
*** Boolean Type
布尔类型
#+begin_src scala
  out0 := true.B
  out1 := false.B
  out2 := 1.B
  out3 := 0.B
#+end_src

#+begin_src verilog
  assign out0 = 1'h1;
  assign out1 = 1'h0;
  assign out2 = 1'h1;
  assign out3 = 1'h0;
#+end_src
** DONE Casting
#+begin_src scala
  out0 := 7.U.asSInt.asUInt.asSInt.asSInt
  out1 := -1.S(3.W).asUInt
  out2 := -1.S.asUInt
#+end_src

#+begin_src verilog
  assign out0 = -3'sh1;
  assign out1 = 3'h7;
  assign out2 = 3'h1;
#+end_src
** DONE Analog
#+begin_src scala
  val Pad = IO(Analog(1.W))
#+end_src

#+begin_src verilog
  inout Pad
#+end_src
* DONE Operators [100%]
** DONE Arithmetic operations
#+begin_src scala
  sum   := a + b
  diff0 := a - b
  prod  := a * b
  div   := a / b
  mod   := a % b
#+end_src

#+begin_src verilog
  assign sum   = a + b;
  assign diff0 = a - b;
  assign prod  = a * b;
  assign div   = a / b;
  assign mod   = a % b;
#+end_src
** DONE Arithmetic comparisons
#+begin_src scala
  gt  := a > b
  gte := a >= b
  lt  := a < b
  lte := a <= b
#+end_src

#+begin_src verilog
  assign lt = a < b;
  assign gt = a > b;
  assign gte = a >= b;
  assign lte = a <= b;
#+end_src

** DONE Equality comparison
#+begin_src scala
  equ := x === y
  neq := x =/= y
#+end_src

#+begin_src verilog
  assign equ = x == y;
  assign neq = x != y;
#+end_src

** DONE Logical Operations
#+begin_src scala
  sleep := !a
  hit   := a && b
  stall := a || b
  out   := Mux(sel, a, b)
#+end_src

#+begin_src verilog
  assign hit = a & b;
  assign sleep = a == 1'h0;
  assign out = sel ? a : b;
  assign stall = a | b;
#+end_src

** DONE Shifts
#+begin_src scala
  hiBits    := y >> 16.U
  twoToTheX := (1.S << x)
#+end_src
  
#+begin_src verilog
  assign hiBits = y >> 5'h10;
  assign twoToTheX = 2'sh1 << x;
#+end_src

** DONE Bitwise Operators
#+begin_src scala
invertedX := ~x                   // Bitwise NOT
hiBits    :=  x & "h_ffff_0000".U // Bitwise AND
OROut     := invertedX | hiBits   // Bitwise OR
XOROut    := invertedX ^ hiBits   // Bitwise XOR
#+end_src

#+begin_src verilog
assign invertedX = ~ x;
assign hiBits = x & 32'hffff0000;
assign OROut = invertedX | hiBits;
assign XOROut = invertedX ^ hiBits;
#+end_src

** DONE Bitwise reductions
#+begin_src scala
  allSet := x.andR
  anySet := x.orR
  parity := x.xorR
#+end_src

#+begin_src verilog
  assign anySet = |x;
  assign allSet = &x;
  assign parity = ^x;
#+end_src

** DONE Bitfield manipulation
#+begin_src scala
  dynamicSel := x(sel, "foo")
  xLSB       := x(0)
  xTopNibble := x(15, 12)
  usDebt     := Fill(3, "hA".U)
  float      := Cat(xLSB, xTopNibble, usDebt)
#+end_src

#+begin_src verilog
  wire [15:0] foo;
  assign dynamicSel = foo[0];
  assign xTopNibble = x[15:12];
  assign foo = x >> sel;
  assign float = {xLSB, xTopNibble, usDebt};
  assign xLSB = x[0];
  assign usDebt = {4'ha, 4'ha, 4'ha};
#+end_src
* DONE Module [100%]
CLOSED: [2021-09-22 三 16:38]
** DONE Simple Case
#+begin_src scala
class Mux2 extends RawModule {
  val sel = IO(Input(UInt(1.W)))
  val in0 = IO(Input(UInt(1.W)))
  val in1 = IO(Input(UInt(1.W)))
  val out = IO(Output(UInt(1.W)))
  out := (sel & in1) | (~sel & in0)
}
#+end_src

#+begin_src verilog
module Mux2 (
  input  sel,
  input  in0,
  input  in1,
  output out
);
  assign out = (sel & in1) | ((~ sel) & in0);
endmodule
#+end_src

#+begin_src scala
class WhichFruit extends RawModule {
  val clk    = IO(Input(Clock()))
  val rst    = IO(Input(Reset()))
  val sel    = IO(Input(Bool()))
  val apple  = IO(Input(Bool()))
  val cherry = IO(Input(Bool()))
  val water  = IO(Input(UInt(3.W)))
  val juice  = IO(Output(UInt(3.W)))

  val bowl = withClockAndReset(clk, rst) { RegInit(5.U) }
  val fruit = WireInit((sel & apple) | (~sel & cherry))
  bowl  := bowl + fruit
  juice := bowl
}
#+end_src

#+begin_src verilog
module WhichFruit (
  input        clk,
  input        rst,
  input        sel,
  input        apple,
  input        cherry,
  input  [2:0] water,
  output [2:0] juice
);
  wire fruit;
  reg  [2:0] bowl;
  assign fruit = (sel & apple) | ((~ sel) & cherry);
  assign juice = bowl;
  always @(posedge clk) begin
      bowl <= bowl + fruit;
  end
endmodule
#+end_src

** DONE Module Hierarchy
#+begin_src scala
class Add extends RawModule {
  val in0 = IO(Input(UInt(32.W)))
  val in1 = IO(Input(UInt(32.W)))
  val out = IO(Output(UInt(32.W)))
  out := in0 + in1
}

class ParentChild extends RawModule {
  val in0 = IO(Input(UInt(4.W)))
  val in1 = IO(Input(UInt(4.W)))
  val out = IO(Output(UInt(32.W)))

  val u_add = Module(new Add)()

  val add10 = Cat(in0, 10.U)
  u_add("in0") := add10
  u_add("in1") := Cat(Seq(5.U, 1.U))

  out := u_add("out") + 9.U
}
#+end_src

#+begin_src verilog
module Add (
  input  [31:0] in0,
  input  [31:0] in1,
  output [31:0] out
);
  assign out = in0 + in1;
endmodule
module ParentChild (
  input  [3:0]  in0,
  input  [3:0]  in1,
  output [31:0] out
);
  assign out = u_add_out + 4'h9;
  Add u_add (
    .in0 ( {in0, 4'ha}  ),
    .in1 ( {3'h5, 1'h1} ),
    .out ( u_add_out    )
  );
endmodule
#+end_src

#+begin_src scala
class Slave extends RawModule {
  val valid = IO(Input(Bool()))
  val addr  = IO(Input(UInt(4.W)))
  val wdata = IO(Input(UInt(4.W)))
  val rdata = IO(Output(UInt(4.W)))
  val ready = IO(Output(Bool()))

  val bus_out = IO(Output(UInt(5.W)))

  bus_out := valid | addr | wdata | rdata

  rdata := wdata
  ready := valid
}

class Master extends RawModule {
  val valid = IO(Output(Bool()))
  val addr  = IO(Output(UInt(4.W)))
  val wdata = IO(Output(UInt(4.W)))
  val rdata = IO(Input(UInt(4.W)))
  val ready = IO(Input(Bool()))

  val bus_out = IO(Output(UInt(5.W)))

  valid := 1.B
  addr  := 12.U
  wdata := 12.U

  bus_out := ready & rdata
}

class ChildChild extends RawModule {
  val out = IO(Output(UInt(5.W)))

  val u_slave  = Module(new Slave)()
  val u_master = Module(new Master)()

  u_slave ("valid") := u_master("valid")
  u_slave ("addr" ) := u_master("addr" )
  u_slave ("wdata") := u_master("wdata")
  u_master("rdata") := u_slave ("rdata")
  u_master("ready") := u_slave ("ready")

  out := u_slave("bus_out") | u_master("bus_out")
}
#+end_src

#+begin_src verilog
module Slave (
  input        valid,
  input  [3:0] addr,
  input  [3:0] wdata,
  output [3:0] rdata,
  output       ready,
  output [4:0] bus_out
);
  assign ready = valid;
  assign bus_out = valid | addr | wdata | rdata;
  assign rdata = wdata;
endmodule
module Master (
  output       valid,
  output [3:0] addr,
  output [3:0] wdata,
  input  [3:0] rdata,
  input        ready,
  output [4:0] bus_out
);
  assign addr = 4'hc;
  assign wdata = 4'hc;
  assign valid = 1'h1;
  assign bus_out = ready & rdata;
endmodule
module ChildChild (
  output [4:0] out
);
  wire u_slave_valid_to_u_master_valid;
  wire u_slave_addr_to_u_master_addr;
  wire u_slave_wdata_to_u_master_wdata;
  wire u_master_rdata_to_u_slave_rdata;
  wire u_master_ready_to_u_slave_ready;
  assign out = u_slave_bus_out | u_master_bus_out;
  Slave u_slave (
    .rdata   ( u_master_rdata_to_u_slave_rdata ),
    .ready   ( u_master_ready_to_u_slave_ready ),
    .wdata   ( u_slave_wdata_to_u_master_wdata ),
    .addr    ( u_slave_addr_to_u_master_addr   ),
    .valid   ( u_slave_valid_to_u_master_valid ),
    .bus_out ( u_slave_bus_out                 )
  );
  Master u_master (
    .rdata   ( u_master_rdata_to_u_slave_rdata ),
    .ready   ( u_master_ready_to_u_slave_ready ),
    .wdata   ( u_slave_wdata_to_u_master_wdata ),
    .addr    ( u_slave_addr_to_u_master_addr   ),
    .valid   ( u_slave_valid_to_u_master_valid ),
    .bus_out ( u_master_bus_out                )
  );
endmodule
#+end_src

** DONE BlackBox
#+begin_src scala
class IBUFDS extends ExtModule (
  Map(
    "DIFF_TERM" -> "TRUE",
    "IOSTANDARD" -> "DEFAULT"
  )
) {
  val O  = IO(Output(Clock()))
  val I  = IO(Input(Clock()))
  val IB = IO(Input(Clock()))
}

class IBUF extends ExtModule {
  val O  = IO(Output(Clock()))
  val I  = IO(Input(Clock()))
  val IB = IO(Input(Clock()))
}

class BlackBoxCase extends RawModule {
  val clk_125M = IO(Input(Clock()))
  val clk_25M  = IO(Input(Clock()))
  val sel      = IO(Input(Bool()))
  val clk_out  = IO(Output(Clock()))

  val ibufds = Module(new IBUFDS)
  val ibuf   = Module(new IBUF  )

  val u_ibufds = ibufds()
  val u_ibuf   = ibuf()

  u_ibufds("I" ) <> clk_125M
  u_ibufds("IB") <> clk_25M

  u_ibuf("I" ) <> clk_125M
  u_ibuf("IB") <> clk_25M

  clk_out := Mux(sel, u_ibufds("O"), u_ibuf("O"))
}
#+end_src

#+begin_src verilog
module BlackBoxCase (
  input  clk_125M,
  input  clk_25M,
  input  sel,
  output clk_out
);
  assign clk_out = sel ? u_ibufds_O : u_ibuf_O;
  IBUFDS #(
    .DIFF_TERM  ("TRUE"   ),
    .IOSTANDARD ("DEFAULT")
  ) u_ibufds (
    .O  ( u_ibufds_O ),
    .I  ( clk_125M   ),
    .IB ( clk_25M    )
  );
  IBUF u_ibuf (
    .O  ( u_ibuf_O ),
    .I  ( clk_125M ),
    .IB ( clk_25M  )
  );
endmodule
#+end_src

#+begin_src scala
class IBUFAgg extends ExtModule {
  val io = IO(Agg(
    "O"  -> Output(Clock()),
    "I"  -> Input(Clock()),
    "IB" -> Input(Clock()),
  ), "")
}

class BlackBoxAggCase extends RawModule {
  val clk_125M = IO(Input(Clock()))
  val clk_25M  = IO(Input(Clock()))
  val sel      = IO(Input(Bool()))
  val clk_out  = IO(Output(Clock()))

  val ibufds = Module(new IBUFDS )
  val ibuf   = Module(new IBUFAgg)

  val u_ibufds = ibufds()
  val u_ibuf   = ibuf()

  u_ibufds("I" ) <> clk_125M
  u_ibufds("IB") <> clk_25M

  u_ibuf("io")("I" ) <> clk_125M
  u_ibuf("io")("IB") <> clk_25M

  clk_out := Mux(sel, u_ibufds("O"), u_ibuf("io")("O"))
}
#+end_src

#+begin_src verilog
module BlackBoxAggCase (
  input  clk_125M,
  input  clk_25M,
  input  sel,
  output clk_out
);
  assign clk_out = sel ? u_ibufds_O : u_ibuf_O;
  IBUFDS #(
    .DIFF_TERM  ("TRUE"   ),
    .IOSTANDARD ("DEFAULT")
  ) u_ibufds (
    .O  ( u_ibufds_O ),
    .I  ( clk_125M   ),
    .IB ( clk_25M    )
  );
  IBUFAgg u_ibuf (
    .O  ( u_ibuf_O ),
    .I  ( clk_125M ),
    .IB ( clk_25M  )
  );
endmodule
#+end_src

#+begin_src scala
class IOPadInOut extends ExtModule {
  val I   = IO(Input(Bool()))
  val OEN = IO(Input(Bool()))
  val O   = IO(Output(Bool()))
  val Pad = IO(InOut(Bool()))
}

class InOutCase extends RawModule {
  val I   = IO(Input(Bool()))
  val OEN = IO(Input(Bool()))
  val O   = IO(Output(Bool()))
  val Pad = IO(InOut(Bool()))

  val pad = Module(new IOPadInOut())()

  pad("I"  ) <> I
  pad("OEN") <> OEN
  pad("O"  ) <> O
  pad("Pad") <> Pad
}
#+end_src

#+begin_src verilog
module InOutCase (
  input  I,
  input  OEN,
  output O,
  inout Pad
);
  IOPadInOut pad (
    .I   ( I   ),
    .OEN ( OEN ),
    .O   ( O   ),
    .Pad ( Pad )
  );
endmodule
#+end_src

* TODO Bundle [%]
* TODO Statements [0%]
** TODO Wire and Reg
** TODO When
** TODO Switch Case

** TODO Mux

** TODO Finite State Machine
